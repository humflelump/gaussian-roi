{"version":3,"sources":["index.tsx"],"names":["dist","n","mean","variance","distribution","gaussian","L","inc","prob","push","ppf","compose","dist1","dist2","f","i","length","j","size","Math","round","sqrt","s","result","shrink","sortBy","d","App","React","useState","setVariance","setMean","data","useMemo","roi","Number","money","map","a","b","console","log","avg","d3","x","y","onClick","width","height","margin","top","right","bottom","left","type","dataKey","name","unit","cursor","strokeDasharray","fill","value","onChange","e","val","aria-labelledby","valueLabelDisplay","min","max","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec923c06.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport gaussian from \"gaussian\";\nimport { sortBy } from \"lodash\";\nimport {\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip\n} from \"recharts\";\nimport * as d3 from \"d3\";\nimport Slider from \"@material-ui/core/Slider\";\n\nfunction dist(n: number, mean = 0, variance = 1) {\n  const distribution = gaussian(mean, variance);\n  const L: number[] = [];\n  const inc = 1 / n;\n  for (let prob = inc * 0.5; prob < 1; prob += inc) {\n    L.push(distribution.ppf(prob));\n  }\n  return L;\n}\n\nfunction shrink(L: number[], size = 100) {\n  let n = 0;\n  let s = 0;\n  const result: number[] = [];\n  for (let i = 0; i < L.length; i += 1) {\n    s += L[i];\n    n += 1;\n    if (n === size) {\n      result.push(s / size);\n      n = 0;\n      s = 0;\n    }\n  }\n  return result;\n}\n\nfunction compose(\n  dist1: number[],\n  dist2: number[],\n  f: (a: number, b: number) => number\n) {\n  const L: number[] = [];\n  for (let i = 0; i < dist1.length; i += 1) {\n    for (let j = 0; j < dist2.length; j += 1) {\n      L.push(f(dist1[i], dist2[j]));\n    }\n  }\n  const size = Math.round(Math.sqrt(dist1.length * dist2.length));\n  const list = sortBy(L, d => d);\n  const shrunk: number[] = shrink(list, size);\n  return shrunk;\n}\n\nfunction avg(L: number[]) {\n  return L.reduce((a, b) => a + b) / L.length;\n}\n\ntype D = {\n  x: number;\n  y: number;\n};\n\nconst App = () => {\n  const [variance, setVariance] = React.useState(10);\n  const [mean, setMean] = React.useState(5);\n\n  const data = React.useMemo(() => {\n    const roi = dist(\n      100,\n      Number(mean),\n      Number(variance) > 0 ? Number(variance) : 0.0001\n    );\n    let money = dist(100, 10, 1).map(d => 10);\n    for (let i = 0; i < 10; i += 1) {\n      money = compose(money, roi, (a, b) => a + (a * b) / 100);\n    }\n    console.log({ roi, money, avg: d3.median(money) });\n    return money.map((n, i) => ({ x: i, y: n }));\n  }, [mean, variance]);\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          // const dist1 = dist(100, 0, 5000);\n        }}\n      >\n        click\n      </button>\n      <ScatterChart\n        width={400}\n        height={400}\n        margin={{\n          top: 20,\n          right: 20,\n          bottom: 20,\n          left: 20\n        }}\n      >\n        <CartesianGrid />\n        <XAxis type=\"number\" dataKey=\"x\" name=\"%\" unit=\"\" />\n        <YAxis type=\"number\" dataKey=\"y\" name=\"money\" unit=\"$\" />\n        <Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n        <Scatter name=\"A school\" data={data} fill=\"#8884d8\" />\n      </ScatterChart>\n      <div>Mean:</div>\n\n      <Slider\n        value={mean}\n        onChange={(e, val) => setMean(Number(val))}\n        aria-labelledby=\"discrete-slider\"\n        valueLabelDisplay=\"auto\"\n        min={0}\n        max={20}\n      />\n      <input\n        value={mean}\n        onChange={e => setMean(Number(e.target.value))}\n        type=\"number\"\n      ></input>\n      <div>Variance:</div>\n\n      <Slider\n        value={variance}\n        onChange={(e, val) => setVariance(Number(val))}\n        aria-labelledby=\"discrete-slider\"\n        valueLabelDisplay=\"auto\"\n        min={0}\n        max={2000}\n      />\n      <input\n        value={variance}\n        onChange={e => setVariance(Number(e.target.value))}\n        type=\"number\"\n      ></input>\n      <div>{`Median: ${d3.median(data, d => d.y)}`}</div>\n      <div>{`Mean: ${d3.mean(data, d => d.y)}`}</div>\n      <div>{`st. dev.: ${d3.deviation(data, d => d.y)}`}</div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}