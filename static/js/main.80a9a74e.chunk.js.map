{"version":3,"sources":["functions.ts","state.ts","investment-list.tsx","results.tsx","Simulate.tsx","index.tsx"],"names":["createDistribution","size","mean","variance","L","i","push","distribution","gaussian","inc","prob","ppf","simplifyDistribution","n","s","result","length","composeDistributions","dist1","dist2","f","j","Math","round","sqrt","sortBy","d","DEFAULT","investmentsAtom","atom","key","default","initialInvestmentAtom","daysAtom","REINVEST","DONT_REINVEST","DONT_REINVEST_NO_DEBT","DONT_REINVEST_MORE","STRATEGY_OPTIONS","investmentStrategyAtom","strategyFunc","selector","get","initial","money","roi","min","Error","simulationFunc","investments","distributions","map","investment","days","func","random","moneyDistribution","weight","a","b","averageDistributions","x","y","InvestmentList","React","memo","useRecoilState","setInvestments","strategy","setStrategy","setDays","initialInvestment","setInitialInvestment","editMean","index","val","clone","cloneDeep","editVariance","Select","labelId","id","value","onChange","e","String","target","option","MenuItem","Slider","Number","aria-labelledby","valueLabelDisplay","max","Paper","elevation","style","margin","padding","width","height","type","onClick","filter","deleteInvestment","addInvestment","Chart","data","useRecoilValue","top","right","bottom","left","dataKey","name","unit","cursor","strokeDasharray","fill","d3","Simulate","useState","setData","sim","simulate","iter","simplified","App","position","overflow","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80a9a74e.chunk.js","sourcesContent":["import gaussian from \"gaussian\";\nimport { sortBy } from \"lodash\";\n\nexport function createDistribution(size: number, mean = 0, variance = 1) {\n  const L: number[] = [];\n  if (variance <= 0) {\n    for (let i = 0; i < size; i += 1) {\n      L.push(mean);\n    }\n    return L;\n  }\n  const distribution = gaussian(mean, variance);\n\n  const inc = 1 / size;\n  for (let prob = inc * 0.5; prob < 1; prob += inc) {\n    L.push(distribution.ppf(prob));\n  }\n  return L;\n}\n\nexport function simplifyDistribution(L: number[], size = 100) {\n  let n = 0;\n  let s = 0;\n  const result: number[] = [];\n  for (let i = 0; i < L.length; i += 1) {\n    s += L[i];\n    n += 1;\n    if (n === size) {\n      result.push(s / size);\n      n = 0;\n      s = 0;\n    }\n  }\n  return result;\n}\n\nexport function composeDistributions(\n  dist1: number[],\n  dist2: number[],\n  f: (a: number, b: number) => number\n) {\n  const L: number[] = [];\n  for (let i = 0; i < dist1.length; i += 1) {\n    for (let j = 0; j < dist2.length; j += 1) {\n      L.push(f(dist1[i], dist2[j]));\n    }\n  }\n  const size = Math.round(Math.sqrt(dist1.length * dist2.length));\n  const list = sortBy(L, d => d);\n  const shrunk: number[] = simplifyDistribution(list, size);\n  return shrunk;\n}\n\nexport function averageDistributions(distributions: number[][]) {\n  if (distributions.length === 0) return [];\n  let result = distributions[0];\n  for (let i = 1; i < distributions.length; i += 1) {\n    let weight = 1 / (i + 1);\n    result = composeDistributions(\n      result,\n      distributions[i],\n      (a, b) => a * weight + b * (1 - weight)\n    );\n  }\n  return result;\n}\n","import { atom, selector } from \"recoil\";\nimport {\n  createDistribution,\n  averageDistributions,\n  composeDistributions\n} from \"./functions\";\nimport gaussian from \"gaussian\";\nimport { sortBy } from \"lodash\";\nimport { simplifyDistribution } from \"./functions\";\n\nexport type Investment = {\n  variance: string | number;\n  mean: string | number;\n};\n\nexport const DEFAULT: Investment = {\n  variance: 200,\n  mean: 5\n};\n\nexport const investmentsAtom = atom({\n  key: \"investments\",\n  default: [DEFAULT]\n});\n\nexport const initialInvestmentAtom = atom({\n  key: \"initial\",\n  default: 10\n});\n\nexport const daysAtom = atom({\n  key: \"days\",\n  default: 10\n});\n\nconst REINVEST = \"Reinvest Gains/Losses\";\nconst DONT_REINVEST = \"Invest Initial Investment (Borrow If Neccessary)\";\nconst DONT_REINVEST_NO_DEBT =\n  \"Invest Initial Investment (Borrow but Stop After Bankruptcy)\";\nconst DONT_REINVEST_MORE = \"Invest No More Than Initial Investment\";\nexport const STRATEGY_OPTIONS = [\n  REINVEST,\n  DONT_REINVEST,\n  DONT_REINVEST_NO_DEBT,\n  DONT_REINVEST_MORE\n];\n\nexport const investmentStrategyAtom = atom({\n  key: \"strategy\",\n  default: STRATEGY_OPTIONS[0]\n});\n\nconst strategyFunc = selector({\n  key: \"strategyfunc\",\n  get: ({ get }) => {\n    const initial = get(initialInvestmentAtom);\n    const strategy = get(investmentStrategyAtom);\n    switch (strategy) {\n      case REINVEST:\n        return (money: number, roi: number) => money + (money * roi) / 100;\n      case DONT_REINVEST:\n        return (money: number, roi: number) => money + (initial * roi) / 100;\n      case DONT_REINVEST_NO_DEBT:\n        return (money: number, roi: number) => {\n          if (money <= 0) return money;\n          return money + (initial * roi) / 100;\n        };\n      case DONT_REINVEST_MORE:\n        return (money: number, roi: number) => {\n          return money + (Math.min(initial, money) * roi) / 100;\n        };\n      default:\n        throw Error(\"Unexpected\");\n    }\n  }\n});\n\nexport const simulationFunc = selector({\n  key: \"simulator\",\n  get: ({ get }) => {\n    const investments = get(investmentsAtom);\n    const initial = get(initialInvestmentAtom);\n    const distributions = investments.map(investment => {\n      return gaussian(+investment.mean, +investment.variance || 0.0000001);\n    });\n    const days = get(daysAtom);\n    const func = get(strategyFunc);\n    return () => {\n      const money = distributions.map(() => initial / distributions.length);\n      for (let i = 0; i < days; i += 1) {\n        for (let j = 0; j < money.length; j += 1) {\n          money[j] = func(money[j], distributions[j].ppf(Math.random()));\n        }\n        let s = 0;\n        for (let i = 0; i < money.length; i += 1) {\n          s += money[i];\n        }\n        for (let j = 0; j < money.length; j += 1) {\n          money[j] = s / distributions.length;\n        }\n      }\n      let s = 0;\n      for (let i = 0; i < money.length; i += 1) {\n        s += money[i];\n      }\n      return s;\n    };\n  }\n});\n\nexport const moneyDistribution = selector({\n  key: \"result\",\n  get: ({ get }) => {\n    const investments = get(investmentsAtom);\n    const distributions = investments.map(investment => {\n      return createDistribution(100, +investment.mean, +investment.variance);\n    });\n    const roi = averageDistributions(distributions);\n    const initial = get(initialInvestmentAtom);\n    const days = get(daysAtom);\n    let money = createDistribution(100, initial, 0);\n    const f = get(strategyFunc);\n    for (let i = 0; i < days; i += 1) {\n      money = composeDistributions(money, roi, f);\n    }\n    return money.map((n, i) => ({ x: i, y: n }));\n    // const sim = get(simulationFunc);\n    // let result: number[] = [];\n    // for (let i = 0; i < 10000; i += 1) {\n    //   result.push(sim());\n    // }\n    // result = sortBy(result, d => d);\n    // const simplified = simplifyDistribution(result, 10000 / 100);\n    // return simplified.map((n, i) => ({ x: i, y: n }));\n  }\n});\n","import React from \"react\";\nimport { atom, useRecoilState } from \"recoil\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { cloneDeep } from \"lodash\";\nimport { Paper, Select, MenuItem } from \"@material-ui/core\";\nimport { daysAtom, initialInvestmentAtom } from \"./state\";\nimport {\n  investmentsAtom,\n  DEFAULT,\n  investmentStrategyAtom,\n  STRATEGY_OPTIONS\n} from \"./state\";\n\nexport const InvestmentList = React.memo(() => {\n  const [investments, setInvestments] = useRecoilState(investmentsAtom);\n  const [strategy, setStrategy] = useRecoilState(investmentStrategyAtom);\n  const [days, setDays] = useRecoilState(daysAtom);\n  const [initialInvestment, setInitialInvestment] = useRecoilState(\n    initialInvestmentAtom\n  );\n  const editMean = (index: number, val: number | string) => {\n    const clone = cloneDeep(investments);\n    clone[index].mean = val;\n    setInvestments(clone);\n  };\n  const editVariance = (index: number, val: number | string) => {\n    const clone = cloneDeep(investments);\n    clone[index].variance = val;\n    setInvestments(clone);\n  };\n  const deleteInvestment = (index: number) => {\n    const clone = investments.filter((d, i) => i !== index);\n    setInvestments(clone);\n  };\n  const addInvestment = () => {\n    const clone = [...investments, { ...DEFAULT }];\n    setInvestments(clone);\n  };\n  return (\n    <div>\n      <h2>Settings</h2>\n      <div>Strategy:</div>\n      <Select\n        labelId=\"demo-simple-select-label\"\n        id=\"demo-simple-select\"\n        value={strategy}\n        onChange={e => setStrategy(String(e.target.value))}\n      >\n        {STRATEGY_OPTIONS.map(option => {\n          return <MenuItem value={option}>{option}</MenuItem>;\n        })}\n      </Select>\n      <div>Days:</div>\n      <Slider\n        value={Number(days)}\n        onChange={(e, val) => setDays(Number(val))}\n        aria-labelledby=\"discrete-slider\"\n        valueLabelDisplay=\"auto\"\n        min={0}\n        max={100}\n      />\n      <div>Initial Investment ($):</div>\n      <Slider\n        value={Number(initialInvestment)}\n        onChange={(e, val) => setInitialInvestment(Number(val))}\n        aria-labelledby=\"discrete-slider\"\n        valueLabelDisplay=\"auto\"\n        min={0}\n        max={100}\n      />\n      {investments.map((investment, index) => {\n        return (\n          <Paper\n            elevation={5}\n            style={{\n              margin: 10,\n              padding: 0,\n              width: \"calc(100% - 20px)\",\n              height: 220\n            }}\n          >\n            <div style={{ margin: 10 }}>\n              <h4>{`Investment ${index + 1}`}</h4>\n              <div>Mean:</div>\n\n              <Slider\n                value={Number(investment.mean)}\n                onChange={(e, val) => editMean(index, Number(val))}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                min={0}\n                max={20}\n              />\n              <input\n                value={investment.mean}\n                onChange={e => editMean(index, e.target.value)}\n                type=\"number\"\n              ></input>\n              <div>Variance:</div>\n\n              <Slider\n                value={Number(investment.variance)}\n                onChange={(e, val) => editVariance(index, Number(val))}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                min={0}\n                max={2000}\n              />\n              <input\n                value={investment.variance}\n                onChange={e => editVariance(index, e.target.value)}\n                type=\"number\"\n              ></input>\n              <div>\n                <button onClick={() => deleteInvestment(index)}>\n                  Delete This Investment\n                </button>\n              </div>\n            </div>\n          </Paper>\n        );\n      })}\n      <button onClick={() => addInvestment()}>Add New Investment</button>\n    </div>\n  );\n});\n","import React from \"react\";\nimport {\n  CartesianGrid,\n  Scatter,\n  ScatterChart,\n  Tooltip,\n  XAxis,\n  YAxis\n} from \"recharts\";\nimport { useRecoilValue } from \"recoil\";\nimport { moneyDistribution, simulationFunc } from \"./state\";\nimport * as d3 from \"d3\";\n\nexport const Chart = React.memo(() => {\n  const data = useRecoilValue(moneyDistribution);\n  const sim = useRecoilValue(simulationFunc);\n  return (\n    <div>\n      <h2>Uniform Sampling</h2>\n      <ScatterChart\n        width={400}\n        height={400}\n        margin={{\n          top: 20,\n          right: 20,\n          bottom: 20,\n          left: 20\n        }}\n      >\n        <CartesianGrid />\n        <XAxis type=\"number\" dataKey=\"x\" name=\"%\" unit=\"\" />\n        <YAxis type=\"number\" dataKey=\"y\" name=\"money\" unit=\"$\" />\n        <Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n        <Scatter name=\"A school\" data={data} fill=\"#8884d8\" />\n      </ScatterChart>\n      <div>{`Mean: ${d3.mean(data, d => d.y)}`}</div>\n      <div>{`Median: ${d3.median(data, d => d.y)}`}</div>\n      <div>{`Std Dev: ${d3.deviation(data, d => d.y)}`}</div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport {\n  CartesianGrid,\n  Scatter,\n  ScatterChart,\n  Tooltip,\n  XAxis,\n  YAxis\n} from \"recharts\";\nimport { useRecoilValue } from \"recoil\";\nimport { moneyDistribution, simulationFunc } from \"./state\";\nimport * as d3 from \"d3\";\nimport { simplifyDistribution } from \"./functions\";\nimport { sortBy } from \"lodash\";\n\ntype DP = {\n  x: number;\n  y: number;\n};\n\nexport const Simulate = React.memo(() => {\n  const [data, setData] = React.useState([] as DP[]);\n  const sim = useRecoilValue(simulationFunc);\n\n  const simulate = (iter: number) => {\n    let result: number[] = [];\n    for (let i = 0; i < iter; i += 1) {\n      result.push(sim());\n    }\n    result = sortBy(result, d => d);\n    const simplified = simplifyDistribution(result, iter / 1000);\n    setData(simplified.map((n, i) => ({ x: i, y: n })));\n  };\n\n  return (\n    <div>\n      <h2>Monte Carlo</h2>\n      <ScatterChart\n        width={400}\n        height={400}\n        margin={{\n          top: 20,\n          right: 20,\n          bottom: 20,\n          left: 20\n        }}\n      >\n        <CartesianGrid />\n        <XAxis type=\"number\" dataKey=\"x\" name=\"%\" unit=\"\" />\n        <YAxis type=\"number\" dataKey=\"y\" name=\"money\" unit=\"$\" />\n        <Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n        <Scatter name=\"A school\" data={data} fill=\"#8884d8\" />\n      </ScatterChart>\n      <div>{`Mean: ${d3.mean(data, d => d.y)}`}</div>\n      <div>{`Median: ${d3.median(data, d => d.y)}`}</div>\n      <div>{`Std Dev: ${d3.deviation(data, d => d.y)}`}</div>\n      <button onClick={() => simulate(1000000)}>Simulate 1M Iterations</button>\n      <button onClick={() => simulate(100000)}>Simulate 100k Iterations</button>\n      <button onClick={() => simulate(10000)}>Simulate 10k Iterations</button>\n      <button onClick={() => setData([])}>Clear</button>\n    </div>\n  );\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { InvestmentList } from \"./investment-list\";\nimport { Chart } from \"./results\";\nimport { Simulate } from \"./Simulate\";\n\nconst App = () => {\n  return (\n    <div>\n      <div\n        id=\"list\"\n        style={{\n          position: \"absolute\",\n          left: 0,\n          top: 0,\n          bottom: 0,\n          width: 500,\n          overflow: \"auto\",\n          padding: 10\n        }}\n      >\n        <InvestmentList />\n      </div>\n      <div\n        id=\"results\"\n        style={{\n          position: \"absolute\",\n          left: 500,\n          top: 0,\n          bottom: 0,\n          width: 500,\n          overflow: \"auto\"\n        }}\n      >\n        <Chart />\n      </div>\n      <div\n        id=\"results\"\n        style={{\n          position: \"absolute\",\n          left: 1000,\n          top: 0,\n          bottom: 0,\n          width: 500,\n          overflow: \"auto\"\n        }}\n      >\n        <Simulate />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(\n  <RecoilRoot>\n    <App />\n  </RecoilRoot>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}